// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get creationTxHash(): Bytes {
    let value = this.get("creationTxHash");
    return value.toBytes();
  }

  set creationTxHash(value: Bytes) {
    this.set("creationTxHash", Value.fromBytes(value));
  }

  get mintTime(): BigInt {
    let value = this.get("mintTime");
    return value.toBigInt();
  }

  set mintTime(value: BigInt) {
    this.set("mintTime", Value.fromBigInt(value));
  }

  get nthMintOverral(): BigInt {
    let value = this.get("nthMintOverral");
    return value.toBigInt();
  }

  set nthMintOverral(value: BigInt) {
    this.set("nthMintOverral", Value.fromBigInt(value));
  }

  get nthMintCreator(): BigInt {
    let value = this.get("nthMintCreator");
    return value.toBigInt();
  }

  set nthMintCreator(value: BigInt) {
    this.set("nthMintCreator", Value.fromBigInt(value));
  }

  get jsonMetadata(): string {
    let value = this.get("jsonMetadata");
    return value.toString();
  }

  set jsonMetadata(value: string) {
    this.set("jsonMetadata", Value.fromString(value));
  }
}

export class NFTStory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFTStory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFTStory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFTStory", id.toString(), this);
  }

  static load(id: string): NFTStory | null {
    return store.get("NFTStory", id) as NFTStory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get minted(): BigInt {
    let value = this.get("minted");
    return value.toBigInt();
  }

  set minted(value: BigInt) {
    this.set("minted", Value.fromBigInt(value));
  }
}

export class Creator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Creator entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Creator entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Creator", id.toString(), this);
  }

  static load(id: string): Creator | null {
    return store.get("Creator", id) as Creator | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get minted(): BigInt {
    let value = this.get("minted");
    return value.toBigInt();
  }

  set minted(value: BigInt) {
    this.set("minted", Value.fromBigInt(value));
  }
}
